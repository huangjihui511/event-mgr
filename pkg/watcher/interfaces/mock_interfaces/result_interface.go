// Code generated by MockGen. DO NOT EDIT.
// Source: huangjihui511/event-mgr/pkg/watcher/interfaces (interfaces: ResultInterface)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResultInterface is a mock of ResultInterface interface.
type MockResultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResultInterfaceMockRecorder
}

// MockResultInterfaceMockRecorder is the mock recorder for MockResultInterface.
type MockResultInterfaceMockRecorder struct {
	mock *MockResultInterface
}

// NewMockResultInterface creates a new mock instance.
func NewMockResultInterface(ctrl *gomock.Controller) *MockResultInterface {
	mock := &MockResultInterface{ctrl: ctrl}
	mock.recorder = &MockResultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultInterface) EXPECT() *MockResultInterfaceMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockResultInterface) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockResultInterfaceMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockResultInterface)(nil).Error))
}

// IsNotify mocks base method.
func (m *MockResultInterface) IsNotify() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotify indicates an expected call of IsNotify.
func (mr *MockResultInterfaceMockRecorder) IsNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotify", reflect.TypeOf((*MockResultInterface)(nil).IsNotify))
}

// Msg mocks base method.
func (m *MockResultInterface) Msg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Msg")
	ret0, _ := ret[0].(string)
	return ret0
}

// Msg indicates an expected call of Msg.
func (mr *MockResultInterfaceMockRecorder) Msg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockResultInterface)(nil).Msg))
}

// Subject mocks base method.
func (m *MockResultInterface) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockResultInterfaceMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockResultInterface)(nil).Subject))
}
